#pragma once

//#include <QCryptographicHash>
//#include <QDateTime>

#ifdef QTDROPBOX_DEBUG
#include <QDebug>
#endif

#include "qdropbox2common.h"
#include "qdropbox2global.h"
#include "qdropbox2account.h"
#include "qdropbox2entityinfo.h"

#include "FoldersModel.h"

#include <QQmlEngine>

/*! The main entry point of QDropbox2, a heavily re-factored version of Daniel Eder's QtDropbox
    to support the new Dropbox APIv2 interface.
*/
/*!
  QDropbox2 provides you with many utilities required to work with a Dropbox account using the
  new APIv2 protocol. For purposes of connection this class provides an asynchronous signal/slot-based
  interface.

  <h3>Connection to new account</h3>
  If you want to initiate a new connection to an account that did not authorize your application to
  access it, you use the static authorizeLink() method to retrieve a valid URL to use (e.g.,
  QDesktopServices::openUrl()) for enabling your application's access from this interface.

  When you have retrieved the access token generated from your registered "App key", then you can
  instantiate an instance of QDropbox2 with that access token to begin working with Dropbox.

  <h3>Connection to authorized account</h3>
  If the account you want to connect to has already authorized your application and you already
  have obtained an access token (generated by your "App key" and "App secret" from the Dropbox
  App Console).

  Should the access token you are using be already expired, the signal tokenExpired() will be
  emitted. In that case, you will need to prompt the user for reauthorization.

  <h3>Using blocking requests</h3>
  Every function that requests information from the server has a blocking and non-blocking function.
  A blocking request will wait until the server has responded to your query before returning while a
  non-blocking request will return immediately. Usually a blocking function directly returns a result
  and a non-blocking function will emit a corresponding signal when the request has finished.

  \warning The use of a blocking function will reset the current error flag. So after calling a blocking
  function the function error() will return QDropbox2::NoError if no error occurred or the error that
  occurred when processing the blocking request.

  \bug HMAC-SHA1 authentication is not working (does not have to be in 1.0)

 */
class QDROPBOXSHARED_EXPORT QDropbox2 : public QObject
{
    Q_OBJECT

public:
    //! Method for oAuth authentication
    /*! These methods are used for authentication with the oAuth protocol
        \bug Currently HMAC-SHA1 encoding does not work. (does not have to be in 1.0)
     */
    enum OAuthMethod
    {
        Plaintext, /*!< Plaintext authentication, HTTPS is automatically used. */
        HMACSHA1 /*!< HMAC-SHA1 encoded authentication */
    };

    //! Error state of QDropbox2
    /*!
      This enum is used to determine the current error state of the Dropbox connection.
      If an error occurs it can be access by using the error() function.
     */
    enum Error
    {
        NoError,                        /*!< No error occurred */
        APIError,                       /*!< Generic API problem (internal code). */
        UnknownAuthMethod,              /*!< The used authentication method is not supported (internal code) */
        FileNotFound = 206,             /*!< A specified file or folder was not found by the Dropbox REST API.*/
        BadInput = 400,                 /*!< A wrong input parameter was sent to the Dropbox REST API. Dropbox API error 400*/
        TokenExpired = 401,             /*!< The access token has expired. Dropbox API error 401*/
        MaxRequestsExceeded = 429,      /*!< The maximum amount of requests was exceeded. Dropbox APIv2 error 429 */
        UserOverQuota = 507,            /*!< The user exceeded his or her storage quota. Dropbox API error 507 */
    };

    /*!
      This constructor creates an default instance of QDropbox2.

      You need to set your API access token by using setAccessToken().

      \param parent The parent with which the QDropbox2 instance is associated.
     */
    explicit QDropbox2(QObject *parent = 0);

    /*!
      This constructor creates an instance of QDropbox2 with an OAuth v1 app key and secret.
      These values will be used to retrieve a temporary access token for interaction with the
      Dropbox account.

      \remark This interface is included for completeness, but really doesn't function.  Personally,
      I don't understand the point of it, since you must have the bearer access token <i>already</i>--which
      in itself is good enough for interactive use of the Dropbox account--to make this call even work.
      There's obviously some subtlety about this APIv2 interface that I'm missing (I'm not an OAuth
      expert).

      \param app_key The application key (provided by Dropbox for an authorized application)
      \param app_secret The application secret (provided by Dropbox for an authorized application)
      \param method Used authentication method
      \param url URL of the API server
      \param parent The parent with which the QDropbox2 instance is associated.
     */
    explicit QDropbox2(const QString& app_key, const QString& app_secret,
                       QObject *parent = 0,
                       OAuthMethod method = QDropbox2::Plaintext,
                       QString url = "api.dropboxapi.com");

    /*!
      This constructor initializes QDropbox2 with your access token. The selected authentication method and
      API URL will be set as well.

      \param access_token access token generated from App key and App secret (provided by Dropbox)
      \param method Used authentication method
      \param url URL of the API server
      \param parent Parent object of QDropbox2
     */
    explicit QDropbox2(const QString& access_token, QObject *parent = 0,
                       OAuthMethod method = QDropbox2::Plaintext,
                       const QString& url = "api.dropboxapi.com");

    /*!
      If an error occurred you can access the last error code by using this function.
     */
    Error  error();

    /*!
      After an error occurred you'll get a description of the last error by using this
      function.
     */
    QString errorString();

    /*!
      Use this function if you want to change the URL of the API server you are
      accessing. This won't usually be necessary as QtDropbox2 automatically chooses the
      official Dropbox API server according to the request.

      \param url URL of the API server.
     */
    void setApiUrl(const QString& url);

    /*!
      Provides you with the address of the API server.
     */
    QString apiUrl();

    /*!
      This function is used to changed the used authentication method. You can use it
      even if you want to change the authentication method during an already existing
      connection.

      \param method Authentication method.
     */
    void setAuthMethod(OAuthMethod method);

    /*!
      Returns the currently used authentication method.
     */
    OAuthMethod authMethod();

    /*!
      Returns the currently used API version.
     */
    QString apiVersion();

    /*!
      If you have an already verified and authorized token to communicate with the
      Dropbox API you can set it by using this function.

      \param t token string
     */
    Q_INVOKABLE void setAccessToken(const QString& token);

    /*!
      Returns the current access token in use.
     */
    QString accessToken();

    /*!
      Revokes (destroys) the access token currently in use with the Dropbox account.
     */
    bool revokeAccessToken();

    /*!
      Returns an URL the user will have to use to authorize the connection to your
      application. You may use that link in connection with QDesktopServices::openUrl(...)
      to open a web browser with the returned URL.

      \remark On a personal note, it is my understanding that OAuth 2.0 does not allow
      for the completely programmatic authorization of an app's access to a Dropbox
      account (as OAuth 1.0 apparently did).  In other words, you will need to present
      this Url to the user via a browser, and have the user manually provide the access
      token that results from their authorization.  If there actually _is_ a way to do
      this all without involving the user (app key and secret?), this flow needs to be
      enhanced to facilitate that.
     */
    static QUrl authorizeLink(const QString& appKey, const QString& redirect_uri = "http://localhost");

    /*!
      By using this function the information of the connected user will be
      retrieved. When the account information was obtained the signal userInfoReceived()
      will be emitted.

      \remark This is an asynchronous call. Emits a signal when information has
      been retrieved.

      \returns <i>true</i> if the request was successfully submitted or <i>false</i> if there was an error.
     */
    bool userInfo();

    /*!
      Works exactly like userInfo() but blocks until the data is received from the server.
      It returns an instance of QDropbox2User containing the requested data. You do not have
      to react on the userInfoReceived() signal when using this function.

      \remark This is a blocking call.
     */
    bool userInfo(QDropbox2User& info);

    /*!
      This function retrieves usage information of the connected user
      account. When the information was obtained the signal usageInfoReceived()
      will be emitted.

      \remark This is an asynchronous call. Emits a signal when information has
      been retrieved.

      \returns <i>true</i> if the request was successfully submitted or <i>false</i> if there was an error.
     */
    bool usageInfo();

    /*!
      Works exactly like usageInfo() but blocks until the data is received from the server.
      It returns an instance of QDropbox2Usage containing the requested data. You do not have
      to react on the usageInfoReceived() signal when using this function.

      \remark This is a blocking call.
     */
    bool usageInfo(QDropbox2Usage& info);

    /*!
      Returns the authentication method as string.
     */
    QString signatureMethodString();

    /*!
      Resets the last error. Use this when you reacted on an error to delete the error flag.
    */
    void clearError();

    /*!
       \brief Creates a QNetworkRequest instance configured for the Dropbox APIv2

       This function will configure a QNetworkRequest with settings required by the
       Dropbox APIv2.  The resulting instance can be further customized for the specific
       function call, and then handed over to Qt for processing.

       This function is exposed publicly for Dropbox entities (e.g., Dropbox2File)
       to employ.

       \param url settings for this request
       \param netreq a QNetworkRequest instance to be configured
    */
    bool createAPIv2Reqeust(QUrl url, QNetworkRequest& netreq, bool include_bearer = true);

signals:
    /*!
      This signal is emitted whenever an error occurs. The error is passed
      as parameter to the slot. To retrieve descriptive information about
      the error use errorString().

      \param errorcode The occurred error.
     */
    void signal_errorOccurred(int errorcode, const QString& errormessage);

    /*!
      Emitted when account user information was received. Only relevant for non-blocking
      use of userInfo().

      \param user An instance of QDropbox2User that contains the account user information.
     */
    void signal_userInfoReceived(const QDropbox2User& user);

    /*!
      Emitted when account usage information was received. Only relevant for non-blocking
      use of usageInfo().

      \param usage An instance of QDropbox2Usage that contains the account usage information.
     */
    void signal_usageInfoReceived(const QDropbox2Usage& usage);

private slots:
    void slot_networkRequestFinished(QNetworkReply* reply);

private:        // typedefs and enums
    enum
    {
        SHA1_DIGEST_LENGTH      = 20,
        SHA1_BLOCK_SIZE         = 64,
        HMAC_BUF_LEN            = 4096
    } ;

private:        // typedefs and enums
    struct CallbackData;
    typedef QSharedPointer<CallbackData> CallbackPtr;
    typedef QMap<QNetworkReply*, CallbackPtr> ReplyMap;

    typedef void(QDropbox2::*AsyncCallback)(QNetworkReply*, CallbackPtr);

private:        // classes
    // since we have simple types, and since we won't create instances
    // without explicitly setting their values, we opt for the default
    // constructors on this class to reduce code clutter.
    struct CallbackData
    {
        AsyncCallback callback;
    };

private:        // methods
    void    init(const QString& api_url = "api.dropbox.com", OAuthMethod oauth_method = Plaintext);
    //QString hmacsha1(QString key, QString baseString);
    void    prepareApiUrl();

    QNetworkReply* sendPOST(QNetworkRequest& rq, QByteArray postdata = 0);
    QNetworkReply* sendGET(QNetworkRequest& rq);

    bool    tokenFromKeyAndSecret();

    bool    requestUserInfo(QNetworkReply*& reply);
    bool    requestUsageInfo(QNetworkReply*& reply);
    bool    requestTokenViaOAuth1(QNetworkReply*& reply);
    bool    requestTokenRevocation(QNetworkReply*& reply);

    // functions for synchronous actions
    void    startEventLoop();
    void    stopEventLoop();

    // QNetworkReply post-processing callbacks (synchronous and asynchronous)
    void    userInfoCallback(QNetworkReply* reply, CallbackPtr data);
    void    usageInfoCallback(QNetworkReply* reply, CallbackPtr data);

private:        // data members
    QNetworkAccessManager QNAM;

    QString         appKey;
    QString         appSecret;
    QString         accessToken_;

    QUrl            apiurl;
    OAuthMethod     oauthMethod;

    int             lastErrorCode;
    QString         lastErrorMessage;
    QString         lastResponse;

    // for asynchronous operations
    ReplyMap        replyMap;

    // for synchronous functions
    QEventLoop      *eventLoop;

    // cached JSON results
    QJsonDocument   cachedJson;

    QDropbox2User   account;
};

Q_DECLARE_METATYPE(QDropbox2::Error);

//Q_DECLARE_METATYPE(QDropbox2);
static void registerQDropbox2Types() {
    //    qmlRegisterSingletonType<DropBoxCPP>("QtDropBox2",
    //                                         1,0,
    //                                         "DropBoxCPP",
    //                                         DropBoxCPP::registerComponent);
    qmlRegisterType<QDropbox2>("QtDropBox2",
                               1,0,
                               "QDropbox2");
    qmlRegisterType<FoldersModel>("QtDropBox2",
                               1,0,
                               "FoldersModel");
//    qmlRegisterType<QDropbox2EntityInfo>("QtDropBox2",
//                                             1,0,
//                                             "QDropbox2EntityInfo");
}

